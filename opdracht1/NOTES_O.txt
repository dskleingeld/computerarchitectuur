opdracht 1, optimised code

main:

	rgl 20-21: 	load A_address into register 4
	rgl 22-23: 	copy A_address to reg 3
	rgl 23:			set counter for first for loop (lets call it 'i') to 0
	rgl 24: 		set reg 5 to 32
	
L2:
	First for loop, (filling of array A)
		rgl 26: 		set A[0] to i (zero for first run then ascending in multipes of 2)
		rgl 27: 		i += 2
		rgl 28: 		if i not 32, execute the next line and repeat L2 till here *
		rgl 29: 		add 4 to address of A (reg 3), :jump to next element of A
		
	Done, preperation of Second for loop	
		rgl 31,34:		load het adress of array B in 2 steps and write 0 to it: B[0] = 0 
		rgl 32,35:		load (the adress of array B) + 4 into reg 2 for later use
									this is the pointer to the second element of the array.
		rgl 33,36:		in the same way load the pointer to the last element of the
									array B

L3:
	Second for loop (filling array B)
		rgl 38:		 load a value from array A, first loop this is A[0]
		rgl 39: 	 set reg2 to reg2+4. This is also the loop counter. And also loops 
							 over array B. The loop ends when this is the pointer to the last element of B. 
		
		rgl 40-41: take the value out of the A array we loaded (first loop A[0])
							 add 95 and store it at the loop counter -4. Remember the loop
							 counter is an adress of B. The adress is B[1] the first loop.	

		rgl 42-43: if we havent just filled the last element of B go to the next 
							 loop, before starting* the next loop update the pointer to 
							 the element of A to point to the next element in A.

	print roman B[N-1]
		rgl 45-46: Load the last element of B [N-1] (the element at byte 60) and
							 store it in register 4. 
		
		rgl 47-48: Reserve 24 bytes on the stack and store reg 31 in the last 4 bytes
	  
	  rgl 49-50: Jump and link print-roman, execute nothing before doing that
	  
	cleanup
		rgl 52-53: load register 31 back from the stack, set register 2 to zero
		rgl 54,55: Jump to the adress in 31, while jumping unreserve/freeup the
							 reserved space on the stack	

	  	
*All branches have an architectural delay of one instruction. When a branch is
taken, the instruction immediately following the branch instruction, in the branch
delay slot, is executed before the branch to the target instruction takes place.
source: "MIPS IV Instruction Set. Rev 3.2"
